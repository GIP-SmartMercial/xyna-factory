#local udp port, listening for messages
port.local.receive=1414
#local udp port, sending messages. 0=anonymous
port.local.send=0
#remote hostname to send messages to
hostname.remote=localhost
#remote port to send messages to
port.remote=1414
#true/false: is this node the master. must be different on the other node
master=true
#if lower than this value, state changes to ERROR
statechange.percentage.low=0.6
#if higher than this value, state changes to OK
statechange.percentage.high=0.9
#after this timeout the sender will resend a message.
timeout.ms=2000
#interval length of messages considered for calculation of network availability percentage
intervallength.ms=10000
#maximum time in between of two successive messages sent to be considered as working connection. should be bigger than 1000/'rate.hz' and smaller than 'timeout.ms'.
timeout.short.ms=200
#maximum rate of messages sent
rate.hz=11
#command to execute on cli if state changes. the parameter OK/ERROR will be added
statechange.cli.command=./signalStateChange.sh
#rate of checking for factory state 
factory.check.rate.hz=0.5
#how to check for factory state
factory.check.cli.command=./checkFactoryState.sh
#expected exitcode of cli command if factory state=OK
factory.check.cli.expectedexitcode=0
#timeout for cli call in ms. factory is seen as not running if the cli execution takes longer than this timeout.
factory.check.cli.timeout=3000

#above properties will be refreshed from properties file with each start of the demon.

# snmpwalk -v2c -c public localhost:20267 1.3.6.1.4.1.28747.1.12.1
# startstop mit snmpset -v2c -c public localhost:20267 1.3.6.1.4.1.28747.1.12.1.1.1.4.<index> i X
# start => X=1
# stop => X=15
# state query: snmpwalk -v2c -c public localhost:20267 1.3.6.1.4.1.28747.1.11.4.1.2.1

demon.status.filename=status
demon.snmp.host=0.0.0.0
demon.snmp.port=20267
demon.snmp.community=public
demon.name=networkAvailability
demon.worker.threads.core=15
demon.worker.threads.max=15
demon.snmp.oid.index=28


