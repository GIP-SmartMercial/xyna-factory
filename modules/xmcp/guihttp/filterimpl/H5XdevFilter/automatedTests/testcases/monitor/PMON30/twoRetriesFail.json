{
  "meta":
  {
    "name": "twoRetriesFailTest",
    "description": "Execute a workflow containing a Step that is retried twice and fails (loaded from app) and open audit",
    "created": "30.03.2020",
    "updated": "15.12.2020"
  },
  "operations":
  [
    {
      "operation": "set",
      "variable": "!customFieldValues!",
      "value": ["test", "", "", ""]
    },
    {
      "operation": "invoke",
      "functionName": "getRegressionApplication",
      "mapInput": {},
      "mapOutput": 
      { 
        "!url!": "!url!", 
        "!applicationName!" : "!applicationName!", 
        "!applicationVersion!": "!applicationVersion!"
      }
    },
    {
      "operation": "invoke",
      "functionName": "runWorkflow",
      "mapInput": 
      {
        "!workflowFQN!": "xmcp.h5x.regression.PMON30.RetryTest",
        "!input!": [{"$meta":{"fqn":"xmcp.h5x.regression.PMON30.RetryTestParameters","rtc":{"application":"!applicationName!","version":"!applicationVersion!"}},"necessaryReductions":2,"reducetionRetryLimit":1}],
        "!customStringContainer!": "!customFieldValues!"
      },
      "mapOutput": 
      { 
        "!orderId!": "!orderId!",
        "!applicationName!": "!applicationName!",
        "!applicationVersion!": "!applicationVersion!"
      }
    },
    {
      "operation": "invoke",
      "functionName": "assertGeneralFields",
      "mapInput":
      {
        "!orderId!": "!orderId!",
        "!dataflowLength!": 11,
        "!retryLength!": 0,
        "!errorsLength!": 1,
        "!rollbackLength!": 0,
        "!customFieldValues!": "!customFieldValues!",
        "!applicationName!": "!applicationName!",
        "!applicationVersion!": "!applicationVersion!"
      }
    },

    { "comment": "check caught step iteration 0", "operation": "comment" },

    {
      "operation": "read",
      "targetVariable": "!caughtStepId!",
      "pathInResponse": "info/$list[3]/id",
      "unquoteResult": "true"
    },
    {
      "operation": "read",
      "targetVariable": "!status!",
      "pathInResponse": "info/$list[id=!caughtStepId!]/iterations/$list[index=0]/runtimeInfo/status",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!status!",
      "value": "Failed"
    },

    {
      "operation": "read",
      "targetVariable": "!orderIdIteration0!",
      "pathInResponse": "info/$list[id=!caughtStepId!]/iterations/$list[index=0]/runtimeInfo/orderId"
    },
    {
      "operation": "assert",
      "constraint": "bigger",
      "variable": "!orderIdIteration0!",
      "value": "0"
    },

    {
      "operation": "read",
      "targetVariable": "!startTime!",
      "pathInResponse": "info/$list[id=!caughtStepId!]/iterations/$list[index=0]/runtimeInfo/runningTime/start"
    },
    {
      "operation": "assert",
      "constraint": "bigger",
      "variable": "!startTime!",
      "value": "0"
    },

    {
      "operation": "read",
      "targetVariable": "!lastUpdate!",
      "pathInResponse": "info/$list[id=!caughtStepId!]/iterations/$list[index=0]/runtimeInfo/runningTime/lastUpdate"
    },
    {
      "operation": "assert",
      "constraint": "bigger",
      "variable": "!lastUpdate!",
      "value": "0"
    },

    { "comment": "check caught step iteration 1", "operation": "comment" },

    {
      "operation": "read",
      "targetVariable": "!status!",
      "pathInResponse": "info/$list[id=!caughtStepId!]/iterations/$list[index=1]/runtimeInfo/status",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!status!",
      "value": "Unknown"
    },

    { "comment": "check executed catch iteration 0", "operation": "comment" },

    {
	  "operation": "modification",
	  "variable": "!caughtStepId!",
	  "modification":
	  {
	    "operation": "replace",
		"toReplace": "step",
		"replacement": ""
	  }
	},
    {
      "operation": "read",
      "pathInResponse": "workflow/areas/$list[name=content]/items/$list[2]/areas/$list[name=errorHandling]/items/$list[0]/areas/$list[0]/items/$list[0]/id",
      "targetVariable": "!branchU677795884-0!",
      "unquoteResult": true
    },
    {
      "operation": "read",
      "targetVariable": "!caughtExceptionException!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=0]/runtimeInfo/caughtException/exception",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!caughtExceptionException!",
      "value": "xmcp.h5x.regression.PMON30.IterationsLeftException"
    },

    {
      "operation": "read",
      "targetVariable": "!caughtExceptionStacktrace!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=0]/runtimeInfo/caughtException/stacktrace",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "contains",
      "variable": "!caughtExceptionStacktrace!",
      "value": "at xmcp.h5x.regression.PMON30.IterationsLeftException."
    },

    {
      "operation": "read",
      "targetVariable": "!caughtExceptionMessage!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=0]/runtimeInfo/caughtException/message",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "contains",
      "variable": "!caughtExceptionMessage!",
      "value": "xmcp.h5x.regression.PMON30.IterationsLeftException:"
    },

    {
      "operation": "read",
      "targetVariable": "!status!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=0]/runtimeInfo/status",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!status!",
      "value": "Finished"
    },

    { "comment": "check executed catch iteration 1", "operation": "comment" },

    {
      "operation": "read",
      "targetVariable": "!branchId!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=1]/runtimeInfo/id",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!branchId!",
      "value": "branch!caughtStepId!-0"
    },
    
    {
      "operation": "read",
      "targetVariable": "!caughtExceptionException!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=1]/runtimeInfo/caughtException/exception",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!caughtExceptionException!",
      "value": "xmcp.h5x.regression.PMON30.IterationsLeftException"
    },

    {
      "operation": "read",
      "targetVariable": "!caughtExceptionStacktrace!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=1]/runtimeInfo/caughtException/stacktrace",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "contains",
      "variable": "!caughtExceptionStacktrace!",
      "value": "at xmcp.h5x.regression.PMON30.IterationsLeftException."
    },

    {
      "operation": "read",
      "targetVariable": "!caughtExceptionMessage!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=1]/runtimeInfo/caughtException/message",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "contains",
      "variable": "!caughtExceptionMessage!",
      "value": "xmcp.h5x.regression.PMON30.IterationsLeftException:"
    },

    {
      "operation": "read",
      "targetVariable": "!status!",
      "pathInResponse": "info/$list[id=!branchU677795884-0!]/iterations/$list[index=1]/runtimeInfo/status",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!status!",
      "value": "Failed"
    },

    { "comment": "check retry iteration 0", "operation": "comment" },

    {
      "operation": "read",
      "targetVariable": "!status!",
      "pathInResponse": "info/$list[id=step26]/iterations/$list[index=0]/runtimeInfo/status",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!status!",
      "value": "Finished"
    },

    {
      "operation": "read",
      "targetVariable": "!startTime!",
      "pathInResponse": "info/$list[id=step26]/iterations/$list[index=0]/runtimeInfo/runningTime/start"
    },
    {
      "operation": "assert",
      "constraint": "bigger",
      "variable": "!startTime!",
      "value": "0"
    },

    {
      "operation": "read",
      "targetVariable": "!lastUpdate!",
      "pathInResponse": "info/$list[id=step26]/iterations/$list[index=0]/runtimeInfo/runningTime/lastUpdate"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!lastUpdate!",
      "value": "-1"
    },
	
	{ "comment": "check retry iteration 1", "operation": "comment" },

    {
      "operation": "read",
      "targetVariable": "!status!",
      "pathInResponse": "info/$list[id=step26]/iterations/$list[index=1]/runtimeInfo/status",
      "unquoteResult": "true"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!status!",
      "value": "Failed"
    },

    {
      "operation": "read",
      "targetVariable": "!startTime!",
      "pathInResponse": "info/$list[id=step26]/iterations/$list[index=1]/runtimeInfo/runningTime/start"
    },
    {
      "operation": "assert",
      "constraint": "bigger",
      "variable": "!startTime!",
      "value": "0"
    },

    {
      "operation": "read",
      "targetVariable": "!lastUpdate!",
      "pathInResponse": "info/$list[id=step26]/iterations/$list[index=1]/runtimeInfo/runningTime/lastUpdate"
    },
    {
      "operation": "assert",
      "constraint": "bigger",
      "variable": "!lastUpdate!",
      "value": "0"
    }
  ]
}
