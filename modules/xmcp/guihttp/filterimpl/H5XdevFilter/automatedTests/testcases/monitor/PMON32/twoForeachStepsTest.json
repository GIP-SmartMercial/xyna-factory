{
  "meta":
  {
    "name": "twoForeachStepsTest",
	"description": "Execute a workflow containing two foreach steps with two iterations (loaded from app) and open audit. Both ForEach steps have two iterations.",
	"created": "14.02.2019",
	"updated": "14.02.2019"
  },
  "operations":
  [
    {
	  "operation": "set",
	  "variable": "!customFieldValues!",
	  "value": ["test", "", "", ""]
	},
    {
      "operation": "invoke",
      "functionName": "runWorkflow",
      "mapInput": 
	  {
	    "!workflowFQN!": "xmcp.h5x.regression.PMON32.MultiForeachWorkflow",
		"!input!": [],
		"!customStringContainer!": "!customFieldValues!"
	  },
      "mapOutput": 
	  { 
	    "!orderId!": "!orderId!",
		"!applicationName!": "!applicationName!",
		"!applicationVersion!": "!applicationVersion!"
      }
    },
	{
	  "operation": "invoke",
	  "functionName": "assertGeneralFields",
	  "mapInput":
	  {
	    "!orderId!": "!orderId!",
		"!dataflowLength!": 6,
		"!retryLength!": 0,
		"!errorsLength!": 0,
		"!rollbackLength!": 0,
		"!customFieldValues!": "!customFieldValues!",
		"!applicationName!": "!applicationName!",
		"!applicationVersion!": "!applicationVersion!"
	  }
	},
    {
      "comment": "correct number of RuntimeInfo objects",
      "operation": "assert",
      "constraint": "listLength",
      "path": "info/$list",
      "expectedValue": 7
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step21]/iterationCount",
      "targetVariable": "!readOuterIterations!"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readOuterIterations!",
      "value": "2"
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step18]/iterations/$list[index=0]/runtimeInfo/iterationCount",
      "targetVariable": "!readInnerIterationCount0!"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readInnerIterationCount0!",
      "value": "2"
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step18]/iterations/$list[index=1]/runtimeInfo/iterationCount",
      "targetVariable": "!readInnerIterationCount1!"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readInnerIterationCount1!",
      "value": "2"
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step15]/iterations/$list[index=0]/runtimeInfo/iterations/$list[index=0]/runtimeInfo/status",
      "targetVariable": "!readMappingStatus00!",
      "unquoteResult": true
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step15]/iterations/$list[index=0]/runtimeInfo/iterations/$list[index=1]/runtimeInfo/status",
      "targetVariable": "!readMappingStatus01!",
      "unquoteResult": true
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step15]/iterations/$list[index=1]/runtimeInfo/iterations/$list[index=0]/runtimeInfo/status",
      "targetVariable": "!readMappingStatus10!",
      "unquoteResult": true
    },
    {
      "operation": "read",
      "pathInResponse": "info/$list[id=step15]/iterations/$list[index=1]/runtimeInfo/iterations/$list[index=1]/runtimeInfo/status",
      "targetVariable": "!readMappingStatus11!",
      "unquoteResult": true
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readMappingStatus00!",
      "value": "Finished"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readMappingStatus01!",
      "value": "Finished"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readMappingStatus10!",
      "value": "Finished"
    },
    {
      "operation": "assert",
      "constraint": "equals",
      "variable": "!readMappingStatus11!",
      "value": "Finished"
    }
  ]
}